	
//parser
printf("inputstring: %s\n", inputString);
	
//print tokens
	for(int j = 0; j<i; j++)
	{
		printf("%s\n", tokenArray[j]);
	}
	


			//-----------parse
			/*
			char * parsedInput[MAX_TOKENS];
			int i = 0;
			char * tokens;

			//tokenization
			tokens = strtok(inputString, " ");

			while(tokens != NULL)
			{
				parsedInput[i++] = tokens;
				//printf("tokens: %s\n", parsedInput[i-1]);
				tokens = strtok(NULL, " ");
			}


			parsedInput[i] = '\0';
			*/
			//----------parse
	
	
//piping

		//printf("here %s\n",parsedCommand[i]);
		//printf("lenght:%d\n", length);
		
		
//commandHasAmpersand

	//printf("command: %s\n",command);
	//printf("lenght: %d\n", stringLength);

//piping method
//printf("process pipe character\n");
	

	//printf("pipe character %d\n", i);
	//printf("lenght %d\n", tokenCount);
	
	//printf("first command: ");
	
		//printf("%s, ", firstCommand[j]);
	
	//printf("second command: ");
	
		//printf("%s,", secondCommand[k-(i+1)]);
	
	
	//secondCommand[0] = "grep";
	//secondCommand[1] = "Rabin";
	//secondCommand[2] = NULL;

	//firstCommand[0] = "cat";
	//firstCommand[1] = "testFile";
	//firstCommand[2] = NULL;
	
	
	
	
	if(childpid == 0)
	{
		//child execution
		//closing the input side of pipe
		dup2(pipefd[0],0);

		close(pipefd[1]);

		execvp(secondCommand[0], secondCommand);
	}
	else
	{
		printf("here\n");
		pid_t childpid1 = fork();

		if(childpid1 == 0)
		{
			//parent execution
						//closing the output side of pipe
						dup2(pipefd[1],1);
						close(pipefd[0]);

						execvp(firstCommand[0], firstCommand);
						printf("never gets here\n");

		}else
		{

			//waitpid(childpid, &pidStatus, 0);
			//waitpid(childpid1, &pidStatus1, 0);
		}

	}
	
	
		while(command[k]!=NULL)
		{
			printf("%s, ", command[k]);
			k++;
		}
		
		printf("\n");
	
	
//file redirection

	int l = 0;
	while(firstCommand[l]!=NULL)
	{
		printf("firstCommand:%s\n", firstCommand[l]);
		l++;
	}

	 l = 0;
		while(secondCommand[l]!=NULL)
		{
			printf("secondCommand:%s\n", secondCommand[l]);
			l++;
		}
		
		
//execute command

			/*char ** parsedInput = parseString(inputString);

			int j;
			//finding the size of the array
			for(j = 0; parsedInput[j]!=NULL; j++)
			{
				//printf("parsedInput in main: %s\n", parsedInput[j]);
			}
			//adding null at the end of the string
			parsedInput[j] = '\0';

			//check if the process needs to run in the background
			hasAmpersand = commandHasAmpersand(parsedInput[0]);

			hasPipeCharacter = commandHasPipeCharacter(parsedInput, j);
			hasIORedirection = commandHasIORedirection(parsedInput, j);

			if(hasPipeCharacter)
			{
				processPipeCharacter(parsedInput, j);
			}
			else if(hasIORedirection)
			{
				processIORedirection(parsedInput, j);
			}
			else
			{
				runInBackground = false;
				if(hasAmpersand)
				{
					runInBackground = true;
					//parsedInput[0] = parsedInput[];
					char * temp = parsedInput[0];
					temp[strlen(temp)-1] = 0;
					parsedInput[0] = temp;
				}


				//fork a child and send the command
				pid = fork();

				//child process
				if(pid == 0)
				{
					execvp(parsedInput[0], parsedInput);

					printf("Child process failed \n");
					exit(1);
				}
				//parent process
				else if(pid < 0)
				{
					printf("Child process could not be created.\n");
				}
				else
				{
					//determine foreground or background
					if(runInBackground)
					{
						//printf("background -");
						//fork a child and run in background
						while(waitpid(-1, &pidStatus, WNOHANG)>0)
						{
							printf("child died");
						}
					}
					else
					{
						//for a child and run in foreground. Parent waits
						//printf("foreground - ");
						//printf("Parent process. \n");

						waitpid(pid, &pidStatus, 0);

					}//parent process - foreground and background
				}//parent process else statement

			}//else part - no piping or I/O redirection
			*/
		}//when string input is not empty


//history


//custom command


					/*for(int i = 0; i<2; i++)
					{
						//creating the child process
						childpid = fork();

						if(childpid == 0)
						{
						//child process execution
							if(i == 0)
							{
								//printf("output process");
								dup2(pipefd[1],STDOUT_FILENO);
								execvp(parsedCommand[0], parsedCommand);
							}
							else //if(i == (numberOfCommands-1))
							{
								dup2(pipefd[0], STDIN_FILENO);
								execvp(teeCommand[0], teeCommand);
							}
						}


						if(i == 0)
						{
							close(pipefd[1]);
						}
						else //if(i == (numberOfCommands -1))
						{
							close(pipefd[0]);

						}

						//child should never get here
						//parent process execution
						waitpid(childpid, &pidStatus, 0);
					}//end of for loop
					*/
					
										/*for(int i = 0; i<tokenCount; i++)
					{
						printf("parsed: %s\n", parsedCommand[i]);
					}*/
					
					
					//execute the command
					//executeCenter(inputString);
					//printf("%s\n", inputString);
					